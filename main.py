import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import altair as alt
import plotly.express as px

with st.echo(code_location='below'):
    df = pd.read_csv('Spotify_data.csv')
    wide_genres = ["country", "folk", "rock", "rap", "pop", "hip hop"]
    wide_genres_ru = ["–∫–∞–Ω—Ç—Ä–∏", "—Ñ–æ–ª–∫", "—Ä–æ–∫", "—Ä—ç–ø", "–ø–æ–ø", "—Ö–∏–ø-—Ö–æ–ø"]

    def detect_genre(top_genre):
        for genre in wide_genres:
            if top_genre.find(genre) >= 0:
                return wide_genres_ru[wide_genres.index(genre)]
        return "–¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä"

    df["wide_genre"] = df["top genre"].dropna().map(detect_genre)

    st.sidebar.title("üé∂ –ú—É–∑—ã–∫–∞ 2010-—Ö")
    visualization = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é:", ["–¢—Ä–µ–Ω–¥—ã –≤ –º—É–∑—ã–∫–µ", "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Å–µ–Ω",
                                                                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∞–Ω—Ä–æ–≤", "–¢–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤", "–î–∞—Ç–∞—Å–µ—Ç"],
                                     index=1)

    charact_codes = ["bpm", "nrgy", "dnce", "dB", "dur", "live", "val", "acous", "spch"]
    charact_list = ["–¢–µ–º–ø (bpm)", "–≠–Ω–µ—Ä–≥–∏—è", "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å", "–ì—Ä–æ–º–∫–æ—Å—Ç—å", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
                    "–ñ–∏–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å", "–ê–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å", "–†–µ—á–∏—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"]
    df = df.rename(columns=dict(zip(charact_codes, charact_list)))
    for ch in ["–≠–Ω–µ—Ä–≥–∏—è", "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å", "–ì—Ä–æ–º–∫–æ—Å—Ç—å",       # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    "–ñ–∏–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å", "–ê–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å", "–†–µ—á–∏—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"]:
        df[ch] = 100 * (df[ch] - df[ch].quantile(0.05)) / (df[ch].quantile(0.95) - df[ch].quantile(0.05))


    if visualization == "–¢—Ä–µ–Ω–¥—ã –≤ –º—É–∑—ã–∫–µ":
            st.markdown("# –¢—Ä–µ–Ω–¥—ã –≤ –º—É–∑—ã–∫–µ")
            st.markdown("### –í —Ç–µ—á–µ–Ω–∏–µ 2010-—Ö –≥–æ–¥–æ–≤ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å—Ç–∞–ª–∏ –≤—ã—à–µ —Ü–µ–Ω–∏—Ç—å –∫–∞–∫ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–µ –∏ "
                        "—Ä–µ—á–∏—Ç–∞—Ç–∏–≤–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∞ —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö "
                        "–ø–µ—Å–µ–Ω —Å–æ–∫—Ä–∞—Ç–∏–ª–∞—Å—å.")
            st.write("–ï–∂–µ–≥–æ–¥–Ω–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Spotify –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç 100 –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω. "
                     "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 2010‚Äì2019 –≥–æ–¥–æ–≤ –∏–∑–º–µ–Ω—è–ª–∏—Å—å –∏—Ö —Å—Ä–µ–¥–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. "
                     "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—è –∏ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ Spotify –∏ "
                     "–ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —à–∫–∞–ª–∞–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö 90 % –ø–µ—Å–µ–Ω —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç 0 –¥–æ 100. "
                     )

            characteristics = np.array(st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", sorted(charact_list),
                                                      default=["–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å", "–ê–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å",
                                                               "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"]))
            source = pd.DataFrame()
            for ch in characteristics:
                source[ch] = df.groupby("top year")[ch].mean()
            try:
                source = pd.melt(source.reset_index(), "top year")
                highlight = alt.selection(type='single', on='mouseover',
                                          fields=['variable'], nearest=True)
                base = alt.Chart(source).encode(
                    alt.X("top year:O", title="–ì–æ–¥"),
                    alt.Y("value:Q", title="–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
                    alt.Color("variable", title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞")
                )
                ### FROM: https://altair-viz.github.io/gallery/multiline_highlight.html
                points = base.mark_circle().encode(
                    opacity=alt.value(0)
                ).add_selection(
                    highlight
                ).properties(
                    width=800,
                    height=500
                )
                lines = base.mark_line(interpolate="basis").encode(
                    size=alt.condition(~highlight, alt.value(2), alt.value(4))
                )
                ### END FROM
                st.altair_chart((points + lines).interactive())
            except:
                st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∫—É.")



    elif visualization == "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Å–µ–Ω":
        col1, col2 = st.columns(2)
        with col1:
            x_axis = st.selectbox("–û—Å—å –•", sorted(charact_list), index=0)
        with col2:
            y_axis = st.selectbox("–û—Å—å Y", sorted(charact_list), index=6)
        year = st.slider("–ì–æ–¥ –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Ç–æ–ø", min_value=2010, value=(2018, 2019), max_value=2019)

        yearly_data = df[(df["top year"] >= year[0]) & (df["top year"] <= year[1])]
        fig = px.scatter(yearly_data,
                         x=x_axis,
                         y=y_axis,
                         size=yearly_data["pop"] - 35,
                         color="wide_genre",
                         color_discrete_sequence=px.colors.qualitative.Pastel,
                         width=800,
                         height=600,
                         category_orders={"wide_genre": sorted(wide_genres_ru) + ["–¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä"]},
                         custom_data=["artist", "year released", "title", "pop"],
                         labels=dict(wide_genre="–ñ–∞–Ω—Ä"),
                         size_max=15,
                         template="simple_white"
                        )
        fig.update_traces(
            hovertemplate="<br>".join([
                "<b>%{customdata[2]}</b>",
                "%{customdata[0]}",
                "",
                x_axis + ": %{x:.2f}",
                y_axis + ": %{y:.2f}",
                "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: %{customdata[3]}",
                "–ì–æ–¥ —Ä–µ–ª–∏–∑–∞: %{customdata[1]}"
            ])
        )

        st.plotly_chart(fig)

    elif visualization == "–î–∞—Ç–∞—Å–µ—Ç":
        st.write(df)
        x = 4

    st.markdown("***")
    """
    –ê–≤—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚Äî [Michael Morris](https://www.kaggle.com/datasets/muhmores/spotify-top-100-songs-of-20152019).
    
    –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
    """